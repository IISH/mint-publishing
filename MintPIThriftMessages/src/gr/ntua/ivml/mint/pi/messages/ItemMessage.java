/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gr.ntua.ivml.mint.pi.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ItemMessage implements org.apache.thrift.TBase<ItemMessage, ItemMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ItemMessage");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("item_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField XML_FIELD_DESC = new org.apache.thrift.protocol.TField("xml", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataset_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("org_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DATESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("datestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SOURCE_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceItem_id", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SOURCE_DATASET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceDataset_id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SCHEMA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_id", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ItemMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ItemMessageTupleSchemeFactory());
  }

  public long item_id; // required
  public String xml; // required
  public int dataset_id; // required
  public int org_id; // required
  public Namespace prefix; // required
  public long datestamp; // required
  public int user_id; // required
  public String project; // required
  public long sourceItem_id; // required
  public int sourceDataset_id; // required
  public int schema_id; // required
  public SchemaValidation valid; // optional
  public List<ExtendedParameter> params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "item_id"),
    XML((short)2, "xml"),
    DATASET_ID((short)3, "dataset_id"),
    ORG_ID((short)4, "org_id"),
    PREFIX((short)5, "prefix"),
    DATESTAMP((short)6, "datestamp"),
    USER_ID((short)7, "user_id"),
    PROJECT((short)8, "project"),
    SOURCE_ITEM_ID((short)9, "sourceItem_id"),
    SOURCE_DATASET_ID((short)10, "sourceDataset_id"),
    SCHEMA_ID((short)11, "schema_id"),
    VALID((short)12, "valid"),
    PARAMS((short)13, "params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // XML
          return XML;
        case 3: // DATASET_ID
          return DATASET_ID;
        case 4: // ORG_ID
          return ORG_ID;
        case 5: // PREFIX
          return PREFIX;
        case 6: // DATESTAMP
          return DATESTAMP;
        case 7: // USER_ID
          return USER_ID;
        case 8: // PROJECT
          return PROJECT;
        case 9: // SOURCE_ITEM_ID
          return SOURCE_ITEM_ID;
        case 10: // SOURCE_DATASET_ID
          return SOURCE_DATASET_ID;
        case 11: // SCHEMA_ID
          return SCHEMA_ID;
        case 12: // VALID
          return VALID;
        case 13: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEM_ID_ISSET_ID = 0;
  private static final int __DATASET_ID_ISSET_ID = 1;
  private static final int __ORG_ID_ISSET_ID = 2;
  private static final int __DATESTAMP_ISSET_ID = 3;
  private static final int __USER_ID_ISSET_ID = 4;
  private static final int __SOURCEITEM_ID_ISSET_ID = 5;
  private static final int __SOURCEDATASET_ID_ISSET_ID = 6;
  private static final int __SCHEMA_ID_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  private _Fields optionals[] = {_Fields.VALID,_Fields.PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("item_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.XML, new org.apache.thrift.meta_data.FieldMetaData("xml", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("dataset_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("org_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Namespace.class)));
    tmpMap.put(_Fields.DATESTAMP, new org.apache.thrift.meta_data.FieldMetaData("datestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceItem_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE_DATASET_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceDataset_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEMA_ID, new org.apache.thrift.meta_data.FieldMetaData("schema_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchemaValidation.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtendedParameter.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ItemMessage.class, metaDataMap);
  }

  public ItemMessage() {
  }

  public ItemMessage(
    long item_id,
    String xml,
    int dataset_id,
    int org_id,
    Namespace prefix,
    long datestamp,
    int user_id,
    String project,
    long sourceItem_id,
    int sourceDataset_id,
    int schema_id)
  {
    this();
    this.item_id = item_id;
    setItem_idIsSet(true);
    this.xml = xml;
    this.dataset_id = dataset_id;
    setDataset_idIsSet(true);
    this.org_id = org_id;
    setOrg_idIsSet(true);
    this.prefix = prefix;
    this.datestamp = datestamp;
    setDatestampIsSet(true);
    this.user_id = user_id;
    setUser_idIsSet(true);
    this.project = project;
    this.sourceItem_id = sourceItem_id;
    setSourceItem_idIsSet(true);
    this.sourceDataset_id = sourceDataset_id;
    setSourceDataset_idIsSet(true);
    this.schema_id = schema_id;
    setSchema_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ItemMessage(ItemMessage other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.item_id = other.item_id;
    if (other.isSetXml()) {
      this.xml = other.xml;
    }
    this.dataset_id = other.dataset_id;
    this.org_id = other.org_id;
    if (other.isSetPrefix()) {
      this.prefix = new Namespace(other.prefix);
    }
    this.datestamp = other.datestamp;
    this.user_id = other.user_id;
    if (other.isSetProject()) {
      this.project = other.project;
    }
    this.sourceItem_id = other.sourceItem_id;
    this.sourceDataset_id = other.sourceDataset_id;
    this.schema_id = other.schema_id;
    if (other.isSetValid()) {
      this.valid = new SchemaValidation(other.valid);
    }
    if (other.isSetParams()) {
      List<ExtendedParameter> __this__params = new ArrayList<ExtendedParameter>();
      for (ExtendedParameter other_element : other.params) {
        __this__params.add(new ExtendedParameter(other_element));
      }
      this.params = __this__params;
    }
  }

  public ItemMessage deepCopy() {
    return new ItemMessage(this);
  }

  @Override
  public void clear() {
    setItem_idIsSet(false);
    this.item_id = 0;
    this.xml = null;
    setDataset_idIsSet(false);
    this.dataset_id = 0;
    setOrg_idIsSet(false);
    this.org_id = 0;
    this.prefix = null;
    setDatestampIsSet(false);
    this.datestamp = 0;
    setUser_idIsSet(false);
    this.user_id = 0;
    this.project = null;
    setSourceItem_idIsSet(false);
    this.sourceItem_id = 0;
    setSourceDataset_idIsSet(false);
    this.sourceDataset_id = 0;
    setSchema_idIsSet(false);
    this.schema_id = 0;
    this.valid = null;
    this.params = null;
  }

  public long getItem_id() {
    return this.item_id;
  }

  public ItemMessage setItem_id(long item_id) {
    this.item_id = item_id;
    setItem_idIsSet(true);
    return this;
  }

  public void unsetItem_id() {
    __isset_bit_vector.clear(__ITEM_ID_ISSET_ID);
  }

  /** Returns true if field item_id is set (has been assigned a value) and false otherwise */
  public boolean isSetItem_id() {
    return __isset_bit_vector.get(__ITEM_ID_ISSET_ID);
  }

  public void setItem_idIsSet(boolean value) {
    __isset_bit_vector.set(__ITEM_ID_ISSET_ID, value);
  }

  public String getXml() {
    return this.xml;
  }

  public ItemMessage setXml(String xml) {
    this.xml = xml;
    return this;
  }

  public void unsetXml() {
    this.xml = null;
  }

  /** Returns true if field xml is set (has been assigned a value) and false otherwise */
  public boolean isSetXml() {
    return this.xml != null;
  }

  public void setXmlIsSet(boolean value) {
    if (!value) {
      this.xml = null;
    }
  }

  public int getDataset_id() {
    return this.dataset_id;
  }

  public ItemMessage setDataset_id(int dataset_id) {
    this.dataset_id = dataset_id;
    setDataset_idIsSet(true);
    return this;
  }

  public void unsetDataset_id() {
    __isset_bit_vector.clear(__DATASET_ID_ISSET_ID);
  }

  /** Returns true if field dataset_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDataset_id() {
    return __isset_bit_vector.get(__DATASET_ID_ISSET_ID);
  }

  public void setDataset_idIsSet(boolean value) {
    __isset_bit_vector.set(__DATASET_ID_ISSET_ID, value);
  }

  public int getOrg_id() {
    return this.org_id;
  }

  public ItemMessage setOrg_id(int org_id) {
    this.org_id = org_id;
    setOrg_idIsSet(true);
    return this;
  }

  public void unsetOrg_id() {
    __isset_bit_vector.clear(__ORG_ID_ISSET_ID);
  }

  /** Returns true if field org_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOrg_id() {
    return __isset_bit_vector.get(__ORG_ID_ISSET_ID);
  }

  public void setOrg_idIsSet(boolean value) {
    __isset_bit_vector.set(__ORG_ID_ISSET_ID, value);
  }

  public Namespace getPrefix() {
    return this.prefix;
  }

  public ItemMessage setPrefix(Namespace prefix) {
    this.prefix = prefix;
    return this;
  }

  public void unsetPrefix() {
    this.prefix = null;
  }

  /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefix() {
    return this.prefix != null;
  }

  public void setPrefixIsSet(boolean value) {
    if (!value) {
      this.prefix = null;
    }
  }

  public long getDatestamp() {
    return this.datestamp;
  }

  public ItemMessage setDatestamp(long datestamp) {
    this.datestamp = datestamp;
    setDatestampIsSet(true);
    return this;
  }

  public void unsetDatestamp() {
    __isset_bit_vector.clear(__DATESTAMP_ISSET_ID);
  }

  /** Returns true if field datestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetDatestamp() {
    return __isset_bit_vector.get(__DATESTAMP_ISSET_ID);
  }

  public void setDatestampIsSet(boolean value) {
    __isset_bit_vector.set(__DATESTAMP_ISSET_ID, value);
  }

  public int getUser_id() {
    return this.user_id;
  }

  public ItemMessage setUser_id(int user_id) {
    this.user_id = user_id;
    setUser_idIsSet(true);
    return this;
  }

  public void unsetUser_id() {
    __isset_bit_vector.clear(__USER_ID_ISSET_ID);
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return __isset_bit_vector.get(__USER_ID_ISSET_ID);
  }

  public void setUser_idIsSet(boolean value) {
    __isset_bit_vector.set(__USER_ID_ISSET_ID, value);
  }

  public String getProject() {
    return this.project;
  }

  public ItemMessage setProject(String project) {
    this.project = project;
    return this;
  }

  public void unsetProject() {
    this.project = null;
  }

  /** Returns true if field project is set (has been assigned a value) and false otherwise */
  public boolean isSetProject() {
    return this.project != null;
  }

  public void setProjectIsSet(boolean value) {
    if (!value) {
      this.project = null;
    }
  }

  public long getSourceItem_id() {
    return this.sourceItem_id;
  }

  public ItemMessage setSourceItem_id(long sourceItem_id) {
    this.sourceItem_id = sourceItem_id;
    setSourceItem_idIsSet(true);
    return this;
  }

  public void unsetSourceItem_id() {
    __isset_bit_vector.clear(__SOURCEITEM_ID_ISSET_ID);
  }

  /** Returns true if field sourceItem_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceItem_id() {
    return __isset_bit_vector.get(__SOURCEITEM_ID_ISSET_ID);
  }

  public void setSourceItem_idIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCEITEM_ID_ISSET_ID, value);
  }

  public int getSourceDataset_id() {
    return this.sourceDataset_id;
  }

  public ItemMessage setSourceDataset_id(int sourceDataset_id) {
    this.sourceDataset_id = sourceDataset_id;
    setSourceDataset_idIsSet(true);
    return this;
  }

  public void unsetSourceDataset_id() {
    __isset_bit_vector.clear(__SOURCEDATASET_ID_ISSET_ID);
  }

  /** Returns true if field sourceDataset_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceDataset_id() {
    return __isset_bit_vector.get(__SOURCEDATASET_ID_ISSET_ID);
  }

  public void setSourceDataset_idIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCEDATASET_ID_ISSET_ID, value);
  }

  public int getSchema_id() {
    return this.schema_id;
  }

  public ItemMessage setSchema_id(int schema_id) {
    this.schema_id = schema_id;
    setSchema_idIsSet(true);
    return this;
  }

  public void unsetSchema_id() {
    __isset_bit_vector.clear(__SCHEMA_ID_ISSET_ID);
  }

  /** Returns true if field schema_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_id() {
    return __isset_bit_vector.get(__SCHEMA_ID_ISSET_ID);
  }

  public void setSchema_idIsSet(boolean value) {
    __isset_bit_vector.set(__SCHEMA_ID_ISSET_ID, value);
  }

  public SchemaValidation getValid() {
    return this.valid;
  }

  public ItemMessage setValid(SchemaValidation valid) {
    this.valid = valid;
    return this;
  }

  public void unsetValid() {
    this.valid = null;
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return this.valid != null;
  }

  public void setValidIsSet(boolean value) {
    if (!value) {
      this.valid = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public java.util.Iterator<ExtendedParameter> getParamsIterator() {
    return (this.params == null) ? null : this.params.iterator();
  }

  public void addToParams(ExtendedParameter elem) {
    if (this.params == null) {
      this.params = new ArrayList<ExtendedParameter>();
    }
    this.params.add(elem);
  }

  public List<ExtendedParameter> getParams() {
    return this.params;
  }

  public ItemMessage setParams(List<ExtendedParameter> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItem_id();
      } else {
        setItem_id((Long)value);
      }
      break;

    case XML:
      if (value == null) {
        unsetXml();
      } else {
        setXml((String)value);
      }
      break;

    case DATASET_ID:
      if (value == null) {
        unsetDataset_id();
      } else {
        setDataset_id((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrg_id();
      } else {
        setOrg_id((Integer)value);
      }
      break;

    case PREFIX:
      if (value == null) {
        unsetPrefix();
      } else {
        setPrefix((Namespace)value);
      }
      break;

    case DATESTAMP:
      if (value == null) {
        unsetDatestamp();
      } else {
        setDatestamp((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((Integer)value);
      }
      break;

    case PROJECT:
      if (value == null) {
        unsetProject();
      } else {
        setProject((String)value);
      }
      break;

    case SOURCE_ITEM_ID:
      if (value == null) {
        unsetSourceItem_id();
      } else {
        setSourceItem_id((Long)value);
      }
      break;

    case SOURCE_DATASET_ID:
      if (value == null) {
        unsetSourceDataset_id();
      } else {
        setSourceDataset_id((Integer)value);
      }
      break;

    case SCHEMA_ID:
      if (value == null) {
        unsetSchema_id();
      } else {
        setSchema_id((Integer)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((SchemaValidation)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((List<ExtendedParameter>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Long.valueOf(getItem_id());

    case XML:
      return getXml();

    case DATASET_ID:
      return Integer.valueOf(getDataset_id());

    case ORG_ID:
      return Integer.valueOf(getOrg_id());

    case PREFIX:
      return getPrefix();

    case DATESTAMP:
      return Long.valueOf(getDatestamp());

    case USER_ID:
      return Integer.valueOf(getUser_id());

    case PROJECT:
      return getProject();

    case SOURCE_ITEM_ID:
      return Long.valueOf(getSourceItem_id());

    case SOURCE_DATASET_ID:
      return Integer.valueOf(getSourceDataset_id());

    case SCHEMA_ID:
      return Integer.valueOf(getSchema_id());

    case VALID:
      return getValid();

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItem_id();
    case XML:
      return isSetXml();
    case DATASET_ID:
      return isSetDataset_id();
    case ORG_ID:
      return isSetOrg_id();
    case PREFIX:
      return isSetPrefix();
    case DATESTAMP:
      return isSetDatestamp();
    case USER_ID:
      return isSetUser_id();
    case PROJECT:
      return isSetProject();
    case SOURCE_ITEM_ID:
      return isSetSourceItem_id();
    case SOURCE_DATASET_ID:
      return isSetSourceDataset_id();
    case SCHEMA_ID:
      return isSetSchema_id();
    case VALID:
      return isSetValid();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ItemMessage)
      return this.equals((ItemMessage)that);
    return false;
  }

  public boolean equals(ItemMessage that) {
    if (that == null)
      return false;

    boolean this_present_item_id = true;
    boolean that_present_item_id = true;
    if (this_present_item_id || that_present_item_id) {
      if (!(this_present_item_id && that_present_item_id))
        return false;
      if (this.item_id != that.item_id)
        return false;
    }

    boolean this_present_xml = true && this.isSetXml();
    boolean that_present_xml = true && that.isSetXml();
    if (this_present_xml || that_present_xml) {
      if (!(this_present_xml && that_present_xml))
        return false;
      if (!this.xml.equals(that.xml))
        return false;
    }

    boolean this_present_dataset_id = true;
    boolean that_present_dataset_id = true;
    if (this_present_dataset_id || that_present_dataset_id) {
      if (!(this_present_dataset_id && that_present_dataset_id))
        return false;
      if (this.dataset_id != that.dataset_id)
        return false;
    }

    boolean this_present_org_id = true;
    boolean that_present_org_id = true;
    if (this_present_org_id || that_present_org_id) {
      if (!(this_present_org_id && that_present_org_id))
        return false;
      if (this.org_id != that.org_id)
        return false;
    }

    boolean this_present_prefix = true && this.isSetPrefix();
    boolean that_present_prefix = true && that.isSetPrefix();
    if (this_present_prefix || that_present_prefix) {
      if (!(this_present_prefix && that_present_prefix))
        return false;
      if (!this.prefix.equals(that.prefix))
        return false;
    }

    boolean this_present_datestamp = true;
    boolean that_present_datestamp = true;
    if (this_present_datestamp || that_present_datestamp) {
      if (!(this_present_datestamp && that_present_datestamp))
        return false;
      if (this.datestamp != that.datestamp)
        return false;
    }

    boolean this_present_user_id = true;
    boolean that_present_user_id = true;
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (this.user_id != that.user_id)
        return false;
    }

    boolean this_present_project = true && this.isSetProject();
    boolean that_present_project = true && that.isSetProject();
    if (this_present_project || that_present_project) {
      if (!(this_present_project && that_present_project))
        return false;
      if (!this.project.equals(that.project))
        return false;
    }

    boolean this_present_sourceItem_id = true;
    boolean that_present_sourceItem_id = true;
    if (this_present_sourceItem_id || that_present_sourceItem_id) {
      if (!(this_present_sourceItem_id && that_present_sourceItem_id))
        return false;
      if (this.sourceItem_id != that.sourceItem_id)
        return false;
    }

    boolean this_present_sourceDataset_id = true;
    boolean that_present_sourceDataset_id = true;
    if (this_present_sourceDataset_id || that_present_sourceDataset_id) {
      if (!(this_present_sourceDataset_id && that_present_sourceDataset_id))
        return false;
      if (this.sourceDataset_id != that.sourceDataset_id)
        return false;
    }

    boolean this_present_schema_id = true;
    boolean that_present_schema_id = true;
    if (this_present_schema_id || that_present_schema_id) {
      if (!(this_present_schema_id && that_present_schema_id))
        return false;
      if (this.schema_id != that.schema_id)
        return false;
    }

    boolean this_present_valid = true && this.isSetValid();
    boolean that_present_valid = true && that.isSetValid();
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (!this.valid.equals(that.valid))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ItemMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ItemMessage typedOther = (ItemMessage)other;

    lastComparison = Boolean.valueOf(isSetItem_id()).compareTo(typedOther.isSetItem_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item_id, typedOther.item_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXml()).compareTo(typedOther.isSetXml());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXml()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xml, typedOther.xml);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataset_id()).compareTo(typedOther.isSetDataset_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataset_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataset_id, typedOther.dataset_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrg_id()).compareTo(typedOther.isSetOrg_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrg_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.org_id, typedOther.org_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(typedOther.isSetPrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, typedOther.prefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatestamp()).compareTo(typedOther.isSetDatestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datestamp, typedOther.datestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProject()).compareTo(typedOther.isSetProject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, typedOther.project);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceItem_id()).compareTo(typedOther.isSetSourceItem_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceItem_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceItem_id, typedOther.sourceItem_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceDataset_id()).compareTo(typedOther.isSetSourceDataset_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceDataset_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceDataset_id, typedOther.sourceDataset_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchema_id()).compareTo(typedOther.isSetSchema_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_id, typedOther.schema_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValid()).compareTo(typedOther.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, typedOther.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ItemMessage(");
    boolean first = true;

    sb.append("item_id:");
    sb.append(this.item_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xml:");
    if (this.xml == null) {
      sb.append("null");
    } else {
      sb.append(this.xml);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataset_id:");
    sb.append(this.dataset_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("org_id:");
    sb.append(this.org_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prefix:");
    if (this.prefix == null) {
      sb.append("null");
    } else {
      sb.append(this.prefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datestamp:");
    sb.append(this.datestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_id:");
    sb.append(this.user_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("project:");
    if (this.project == null) {
      sb.append("null");
    } else {
      sb.append(this.project);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceItem_id:");
    sb.append(this.sourceItem_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceDataset_id:");
    sb.append(this.sourceDataset_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_id:");
    sb.append(this.schema_id);
    first = false;
    if (isSetValid()) {
      if (!first) sb.append(", ");
      sb.append("valid:");
      if (this.valid == null) {
        sb.append("null");
      } else {
        sb.append(this.valid);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ItemMessageStandardSchemeFactory implements SchemeFactory {
    public ItemMessageStandardScheme getScheme() {
      return new ItemMessageStandardScheme();
    }
  }

  private static class ItemMessageStandardScheme extends StandardScheme<ItemMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ItemMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.item_id = iprot.readI64();
              struct.setItem_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xml = iprot.readString();
              struct.setXmlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATASET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataset_id = iprot.readI32();
              struct.setDataset_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.org_id = iprot.readI32();
              struct.setOrg_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prefix = new Namespace();
              struct.prefix.read(iprot);
              struct.setPrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.datestamp = iprot.readI64();
              struct.setDatestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user_id = iprot.readI32();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.project = iprot.readString();
              struct.setProjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SOURCE_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sourceItem_id = iprot.readI64();
              struct.setSourceItem_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SOURCE_DATASET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceDataset_id = iprot.readI32();
              struct.setSourceDataset_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SCHEMA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_id = iprot.readI32();
              struct.setSchema_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valid = new SchemaValidation();
              struct.valid.read(iprot);
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.params = new ArrayList<ExtendedParameter>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ExtendedParameter _elem2; // required
                  _elem2 = new ExtendedParameter();
                  _elem2.read(iprot);
                  struct.params.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ItemMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI64(struct.item_id);
      oprot.writeFieldEnd();
      if (struct.xml != null) {
        oprot.writeFieldBegin(XML_FIELD_DESC);
        oprot.writeString(struct.xml);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATASET_ID_FIELD_DESC);
      oprot.writeI32(struct.dataset_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.org_id);
      oprot.writeFieldEnd();
      if (struct.prefix != null) {
        oprot.writeFieldBegin(PREFIX_FIELD_DESC);
        struct.prefix.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATESTAMP_FIELD_DESC);
      oprot.writeI64(struct.datestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.user_id);
      oprot.writeFieldEnd();
      if (struct.project != null) {
        oprot.writeFieldBegin(PROJECT_FIELD_DESC);
        oprot.writeString(struct.project);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SOURCE_ITEM_ID_FIELD_DESC);
      oprot.writeI64(struct.sourceItem_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_DATASET_ID_FIELD_DESC);
      oprot.writeI32(struct.sourceDataset_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_ID_FIELD_DESC);
      oprot.writeI32(struct.schema_id);
      oprot.writeFieldEnd();
      if (struct.valid != null) {
        if (struct.isSetValid()) {
          oprot.writeFieldBegin(VALID_FIELD_DESC);
          struct.valid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.params.size()));
            for (ExtendedParameter _iter3 : struct.params)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemMessageTupleSchemeFactory implements SchemeFactory {
    public ItemMessageTupleScheme getScheme() {
      return new ItemMessageTupleScheme();
    }
  }

  private static class ItemMessageTupleScheme extends TupleScheme<ItemMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ItemMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItem_id()) {
        optionals.set(0);
      }
      if (struct.isSetXml()) {
        optionals.set(1);
      }
      if (struct.isSetDataset_id()) {
        optionals.set(2);
      }
      if (struct.isSetOrg_id()) {
        optionals.set(3);
      }
      if (struct.isSetPrefix()) {
        optionals.set(4);
      }
      if (struct.isSetDatestamp()) {
        optionals.set(5);
      }
      if (struct.isSetUser_id()) {
        optionals.set(6);
      }
      if (struct.isSetProject()) {
        optionals.set(7);
      }
      if (struct.isSetSourceItem_id()) {
        optionals.set(8);
      }
      if (struct.isSetSourceDataset_id()) {
        optionals.set(9);
      }
      if (struct.isSetSchema_id()) {
        optionals.set(10);
      }
      if (struct.isSetValid()) {
        optionals.set(11);
      }
      if (struct.isSetParams()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetItem_id()) {
        oprot.writeI64(struct.item_id);
      }
      if (struct.isSetXml()) {
        oprot.writeString(struct.xml);
      }
      if (struct.isSetDataset_id()) {
        oprot.writeI32(struct.dataset_id);
      }
      if (struct.isSetOrg_id()) {
        oprot.writeI32(struct.org_id);
      }
      if (struct.isSetPrefix()) {
        struct.prefix.write(oprot);
      }
      if (struct.isSetDatestamp()) {
        oprot.writeI64(struct.datestamp);
      }
      if (struct.isSetUser_id()) {
        oprot.writeI32(struct.user_id);
      }
      if (struct.isSetProject()) {
        oprot.writeString(struct.project);
      }
      if (struct.isSetSourceItem_id()) {
        oprot.writeI64(struct.sourceItem_id);
      }
      if (struct.isSetSourceDataset_id()) {
        oprot.writeI32(struct.sourceDataset_id);
      }
      if (struct.isSetSchema_id()) {
        oprot.writeI32(struct.schema_id);
      }
      if (struct.isSetValid()) {
        struct.valid.write(oprot);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (ExtendedParameter _iter4 : struct.params)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ItemMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.item_id = iprot.readI64();
        struct.setItem_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.xml = iprot.readString();
        struct.setXmlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataset_id = iprot.readI32();
        struct.setDataset_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.org_id = iprot.readI32();
        struct.setOrg_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.prefix = new Namespace();
        struct.prefix.read(iprot);
        struct.setPrefixIsSet(true);
      }
      if (incoming.get(5)) {
        struct.datestamp = iprot.readI64();
        struct.setDatestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.user_id = iprot.readI32();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.project = iprot.readString();
        struct.setProjectIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sourceItem_id = iprot.readI64();
        struct.setSourceItem_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sourceDataset_id = iprot.readI32();
        struct.setSourceDataset_idIsSet(true);
      }
      if (incoming.get(10)) {
        struct.schema_id = iprot.readI32();
        struct.setSchema_idIsSet(true);
      }
      if (incoming.get(11)) {
        struct.valid = new SchemaValidation();
        struct.valid.read(iprot);
        struct.setValidIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.params = new ArrayList<ExtendedParameter>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ExtendedParameter _elem7; // required
            _elem7 = new ExtendedParameter();
            _elem7.read(iprot);
            struct.params.add(_elem7);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

}

