/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gr.ntua.ivml.mint.pi.messages;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExtendedParameter implements org.apache.thrift.TBase<ExtendedParameter, ExtendedParameter._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExtendedParameter");

  private static final org.apache.thrift.protocol.TField PARAMETER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARAMETER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterValue", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExtendedParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExtendedParameterTupleSchemeFactory());
  }

  public String parameterName; // required
  public String parameterValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARAMETER_NAME((short)1, "parameterName"),
    PARAMETER_VALUE((short)2, "parameterValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARAMETER_NAME
          return PARAMETER_NAME;
        case 2: // PARAMETER_VALUE
          return PARAMETER_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARAMETER_NAME, new org.apache.thrift.meta_data.FieldMetaData("parameterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("parameterValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExtendedParameter.class, metaDataMap);
  }

  public ExtendedParameter() {
  }

  public ExtendedParameter(
    String parameterName,
    String parameterValue)
  {
    this();
    this.parameterName = parameterName;
    this.parameterValue = parameterValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExtendedParameter(ExtendedParameter other) {
    if (other.isSetParameterName()) {
      this.parameterName = other.parameterName;
    }
    if (other.isSetParameterValue()) {
      this.parameterValue = other.parameterValue;
    }
  }

  public ExtendedParameter deepCopy() {
    return new ExtendedParameter(this);
  }

  @Override
  public void clear() {
    this.parameterName = null;
    this.parameterValue = null;
  }

  public String getParameterName() {
    return this.parameterName;
  }

  public ExtendedParameter setParameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

  public void unsetParameterName() {
    this.parameterName = null;
  }

  /** Returns true if field parameterName is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterName() {
    return this.parameterName != null;
  }

  public void setParameterNameIsSet(boolean value) {
    if (!value) {
      this.parameterName = null;
    }
  }

  public String getParameterValue() {
    return this.parameterValue;
  }

  public ExtendedParameter setParameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
    return this;
  }

  public void unsetParameterValue() {
    this.parameterValue = null;
  }

  /** Returns true if field parameterValue is set (has been assigned a value) and false otherwise */
  public boolean isSetParameterValue() {
    return this.parameterValue != null;
  }

  public void setParameterValueIsSet(boolean value) {
    if (!value) {
      this.parameterValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARAMETER_NAME:
      if (value == null) {
        unsetParameterName();
      } else {
        setParameterName((String)value);
      }
      break;

    case PARAMETER_VALUE:
      if (value == null) {
        unsetParameterValue();
      } else {
        setParameterValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARAMETER_NAME:
      return getParameterName();

    case PARAMETER_VALUE:
      return getParameterValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARAMETER_NAME:
      return isSetParameterName();
    case PARAMETER_VALUE:
      return isSetParameterValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExtendedParameter)
      return this.equals((ExtendedParameter)that);
    return false;
  }

  public boolean equals(ExtendedParameter that) {
    if (that == null)
      return false;

    boolean this_present_parameterName = true && this.isSetParameterName();
    boolean that_present_parameterName = true && that.isSetParameterName();
    if (this_present_parameterName || that_present_parameterName) {
      if (!(this_present_parameterName && that_present_parameterName))
        return false;
      if (!this.parameterName.equals(that.parameterName))
        return false;
    }

    boolean this_present_parameterValue = true && this.isSetParameterValue();
    boolean that_present_parameterValue = true && that.isSetParameterValue();
    if (this_present_parameterValue || that_present_parameterValue) {
      if (!(this_present_parameterValue && that_present_parameterValue))
        return false;
      if (!this.parameterValue.equals(that.parameterValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ExtendedParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ExtendedParameter typedOther = (ExtendedParameter)other;

    lastComparison = Boolean.valueOf(isSetParameterName()).compareTo(typedOther.isSetParameterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterName, typedOther.parameterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameterValue()).compareTo(typedOther.isSetParameterValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameterValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterValue, typedOther.parameterValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExtendedParameter(");
    boolean first = true;

    sb.append("parameterName:");
    if (this.parameterName == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parameterValue:");
    if (this.parameterValue == null) {
      sb.append("null");
    } else {
      sb.append(this.parameterValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExtendedParameterStandardSchemeFactory implements SchemeFactory {
    public ExtendedParameterStandardScheme getScheme() {
      return new ExtendedParameterStandardScheme();
    }
  }

  private static class ExtendedParameterStandardScheme extends StandardScheme<ExtendedParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExtendedParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARAMETER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameterName = iprot.readString();
              struct.setParameterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAMETER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameterValue = iprot.readString();
              struct.setParameterValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExtendedParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parameterName != null) {
        oprot.writeFieldBegin(PARAMETER_NAME_FIELD_DESC);
        oprot.writeString(struct.parameterName);
        oprot.writeFieldEnd();
      }
      if (struct.parameterValue != null) {
        oprot.writeFieldBegin(PARAMETER_VALUE_FIELD_DESC);
        oprot.writeString(struct.parameterValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExtendedParameterTupleSchemeFactory implements SchemeFactory {
    public ExtendedParameterTupleScheme getScheme() {
      return new ExtendedParameterTupleScheme();
    }
  }

  private static class ExtendedParameterTupleScheme extends TupleScheme<ExtendedParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExtendedParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetParameterName()) {
        optionals.set(0);
      }
      if (struct.isSetParameterValue()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetParameterName()) {
        oprot.writeString(struct.parameterName);
      }
      if (struct.isSetParameterValue()) {
        oprot.writeString(struct.parameterValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExtendedParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.parameterName = iprot.readString();
        struct.setParameterNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parameterValue = iprot.readString();
        struct.setParameterValueIsSet(true);
      }
    }
  }

}

